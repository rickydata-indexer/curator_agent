app:
  description: Finds best curation signal opportunities
  icon: ❗
  icon_background: '#D5F5F6'
  mode: workflow
  name: curation_best_opportunities
  use_icon_as_answer_icon: false
kind: app
version: 0.1.3
workflow:
  conversation_variables: []
  environment_variables:
  - description: ''
    id: 2d78bdd6-bd68-4824-8ee9-d1e22e5ef41e
    name: infura_api_key
    selector: []
    value: 92630c9af2f44a74ad44c2832cc58bdb
    value_type: string
  - description: ''
    id: 4a3bbc32-f725-44b5-9c84-9215597eca34
    name: agent_address
    selector: []
    value: ''
    value_type: secret
  features:
    file_upload:
      allowed_file_extensions:
      - .JPG
      - .JPEG
      - .PNG
      - .GIF
      - .WEBP
      - .SVG
      allowed_file_types:
      - image
      allowed_file_upload_methods:
      - local_file
      - remote_url
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 10
        file_size_limit: 150
        image_file_size_limit: 100
        video_file_size_limit: 500
        workflow_file_upload_limit: 30
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 3
    opening_statement: ''
    retriever_resource:
      enabled: true
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInIteration: false
        sourceType: start
        targetType: code
      id: 1733182462673-source-1733182527333-target
      source: '1733182462673'
      sourceHandle: source
      target: '1733182527333'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: tool
      id: 1733182527333-source-1733182757094-target
      source: '1733182527333'
      sourceHandle: source
      target: '1733182757094'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: tool
      id: 1733182757094-source-1733184608572-target
      source: '1733182757094'
      sourceHandle: source
      target: '1733184608572'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: tool
      id: 1733184608572-source-1733184628502-target
      source: '1733184608572'
      sourceHandle: source
      target: '1733184628502'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: end
      id: 1733184685947-source-1733182826895-target
      source: '1733184685947'
      sourceHandle: source
      target: '1733182826895'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: tool
      id: 1733184628502-source-1735382903843-target
      source: '1733184628502'
      sourceHandle: source
      target: '1735382903843'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: code
      id: 1735382903843-source-1733184685947-target
      source: '1735382903843'
      sourceHandle: source
      target: '1733184685947'
      targetHandle: target
      type: custom
      zIndex: 0
    nodes:
    - data:
        desc: ''
        selected: true
        title: Start
        type: start
        variables:
        - label: min_apr
          max_length: 48
          options: []
          required: true
          type: number
          variable: min_apr
        - label: min_weekly_queries
          max_length: 48
          options: []
          required: true
          type: number
          variable: min_weekly_queries
        - label: min_subgraph_signal
          max_length: 48
          options: []
          required: true
          type: number
          variable: min_subgraph_signal
      height: 140
      id: '1733182462673'
      position:
        x: 80
        y: 282
      positionAbsolute:
        x: 80
        y: 282
      selected: true
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "\ndef main() -> dict:\n    return {\n        \"num_days\": 7\n    }\n"
        code_language: python3
        desc: Set the number of days to query historical query volume data for
        outputs:
          num_days:
            children: null
            type: number
        selected: false
        title: Set num_days
        type: code
        variables: []
      height: 96
      id: '1733182527333'
      position:
        x: 383
        y: 282
      positionAbsolute:
        x: 383
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        provider_id: d0e3de9e-b41e-413f-8bd2-d8e4e22cf1ea
        provider_name: pull_subgraph_query_volume
        provider_type: workflow
        selected: false
        title: pull_subgraph_query_volume
        tool_configurations: {}
        tool_label: pull_subgraph_query_volume
        tool_name: pull_subgraph_query_volume
        tool_parameters:
          num_days:
            type: variable
            value:
            - '1733182527333'
            - num_days
        type: tool
      height: 52
      id: '1733182757094'
      position:
        x: 688.2302306619622
        y: 282
      positionAbsolute:
        x: 688.2302306619622
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        outputs:
        - value_selector:
          - '1733184685947'
          - result
          variable: new_signals
        selected: false
        title: End
        type: end
      height: 88
      id: '1733182826895'
      position:
        x: 2190
        y: 282
      positionAbsolute:
        x: 2190
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        provider_id: fd656f13-465b-4b68-9202-11fab282ee0c
        provider_name: pull_curation_signal_all_subgraphs
        provider_type: workflow
        selected: false
        title: pull_curation_signal_all_subgraphs
        tool_configurations: {}
        tool_label: pull_curation_signal_all_subgraphs
        tool_name: pull_curation_signal_all_subgraphs
        tool_parameters: {}
        type: tool
      height: 52
      id: '1733184608572'
      position:
        x: 990
        y: 282
      positionAbsolute:
        x: 990
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        provider_id: bd39682c-01a6-4dca-b195-bb3db87e62b1
        provider_name: pull_grt_balance
        provider_type: workflow
        selected: false
        title: pull_grt_balance
        tool_configurations: {}
        tool_label: pull_grt_balance
        tool_name: pull_grt_balance
        tool_parameters:
          infura_api_key:
            type: mixed
            value: '{{#env.infura_api_key#}}'
          wallet_address:
            type: mixed
            value: '{{#env.agent_address#}}'
        type: tool
      height: 52
      id: '1733184628502'
      position:
        x: 1290
        y: 282
      positionAbsolute:
        x: 1290
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "from typing import Dict, List, Any, Optional, Union\nimport json\n\n\
          def main(\n    signal_data: Union[str, Dict], \n    query_data: Union[str,\
          \ Dict], \n    grt_balance_data: Union[str, Dict],\n    grt_price: Union[str,\
          \ Dict],  # New parameter\n    min_apr: float = 0.0,\n    min_weekly_queries:\
          \ int = 0,\n    min_subgraph_signal: float = 0.0\n) -> Dict[str, Any]:\n\
          \    \"\"\"\n    Calculate best curation opportunities from signal, query,\
          \ and balance data.\n    \n    Args:\n        signal_data: JSON string or\
          \ dict from pull_curation_signal_all_subgraphs\n        query_data: JSON\
          \ string or dict from pull_subgraph_query_volume\n        grt_balance_data:\
          \ JSON string or dict from pull_grt_balance\n        grt_price: JSON string\
          \ or dict containing current GRT price\n        min_apr: Minimum APR threshold\
          \ (percentage)\n        min_weekly_queries: Minimum weekly query count threshold\n\
          \        min_subgraph_signal: Minimum subgraph signal threshold (in GRT)\n\
          \        \n    Returns:\n        Dict containing filtered opportunities\
          \ array or error\n    \"\"\"\n    try:\n        # Parse JSON strings if\
          \ needed\n        if isinstance(signal_data, str):\n            signal_data\
          \ = json.loads(signal_data)\n        if isinstance(query_data, str):\n \
          \           query_data = json.loads(query_data)\n        if isinstance(grt_balance_data,\
          \ str):\n            grt_balance_data = json.loads(grt_balance_data)\n \
          \       if isinstance(grt_price, str):\n            grt_price = json.loads(grt_price)\n\
          \            \n        # Extract current GRT price from the new format\n\
          \        current_price = float(grt_price.get('price', 0.0))\n          \
          \  \n        # Extract deployments from signal_data\n        deployments\
          \ = signal_data.get('subgraph_signal', [])\n        \n        # Extract\
          \ query counts from query_data\n        query_counts = query_data.get('data',\
          \ [])\n        \n        # Convert query counts to dictionary for easier\
          \ lookup\n        query_counts_dict = {q['subgraph_deployment_ipfs_hash']:\
          \ int(q['query_count']) \n                           for q in query_counts}\n\
          \        \n        opportunities = []\n        \n        for deployment\
          \ in deployments:\n            ipfs_hash = deployment.get('ipfsHash')\n\
          \            if not ipfs_hash:\n                continue\n             \
          \   \n            # Convert wei values to GRT\n            signal_amount\
          \ = float(deployment.get('signalAmount', '0')) / 1e18\n            signalled_tokens\
          \ = float(deployment.get('signalledTokens', '0')) / 1e18\n            \n\
          \            # Apply minimum signal threshold\n            if signalled_tokens\
          \ < min_subgraph_signal:\n                continue\n                \n \
          \           # Skip if no signal\n            if signal_amount == 0:\n  \
          \              continue\n                \n            # Get weekly query\
          \ count and apply threshold\n            weekly_queries = query_counts_dict.get(ipfs_hash,\
          \ 0)\n            if weekly_queries < min_weekly_queries:\n            \
          \    continue\n                \n            # Calculate metrics\n     \
          \       annual_queries = weekly_queries * 52\n            total_earnings\
          \ = (annual_queries / 100000) * 4  # $4 per 100k queries\n            curator_share\
          \ = total_earnings * 0.1  # 10% to curators\n            \n            #\
          \ Calculate portion owned and earnings\n            portion_owned = signal_amount\
          \ / signalled_tokens if signalled_tokens > 0 else 0\n            estimated_earnings\
          \ = curator_share * portion_owned\n            \n            # Calculate\
          \ APR using dynamic price and apply threshold\n            apr = (estimated_earnings\
          \ / (signal_amount * current_price)) * 100 if signal_amount > 0 else 0\n\
          \            if apr < min_apr:\n                continue\n            \n\
          \            opportunities.append({\n                \"ipfs_hash\": ipfs_hash,\n\
          \                \"signal_amount\": signal_amount,\n                \"signalled_tokens\"\
          : signalled_tokens,\n                \"annual_queries\": annual_queries,\n\
          \                \"total_earnings\": total_earnings,\n                \"\
          curator_share\": curator_share,\n                \"estimated_earnings\"\
          : estimated_earnings,\n                \"apr\": apr,\n                \"\
          weekly_queries\": weekly_queries\n            })\n        \n        # Sort\
          \ opportunities by APR in descending order and take top 10\n        sorted_opportunities\
          \ = sorted(opportunities, key=lambda x: x['apr'], reverse=True)[:10]\n \
          \       \n        return {\n            \"result\": sorted_opportunities\n\
          \        }\n            \n    except Exception as e:\n        print(f\"\
          Error occurred: {str(e)}\")  # For debugging\n        return {\n       \
          \     \"result\": []\n        }"
        code_language: python3
        desc: 'Note: change hard-coded GRT price'
        outputs:
          result:
            children: null
            type: array[object]
        selected: false
        title: Calculate APRs
        type: code
        variables:
        - value_selector:
          - '1733184608572'
          - text
          variable: signal_data
        - value_selector:
          - '1733182757094'
          - text
          variable: query_data
        - value_selector:
          - '1733184628502'
          - text
          variable: grt_balance_data
        - value_selector:
          - '1733182462673'
          - min_apr
          variable: min_apr
        - value_selector:
          - '1733182462673'
          - min_weekly_queries
          variable: min_weekly_queries
        - value_selector:
          - '1733182462673'
          - min_subgraph_signal
          variable: min_subgraph_signal
        - value_selector:
          - '1735382903843'
          - text
          variable: grt_price
      height: 80
      id: '1733184685947'
      position:
        x: 1890
        y: 282
      positionAbsolute:
        x: 1890
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        provider_id: e017c7ac-f31f-4eaf-bfc3-a1717842424c
        provider_name: current_grt_price_usd
        provider_type: workflow
        selected: false
        title: current_grt_price_usd
        tool_configurations: {}
        tool_label: current_grt_price_usd
        tool_name: current_grt_price_usd
        tool_parameters: {}
        type: tool
      height: 52
      id: '1735382903843'
      position:
        x: 1590
        y: 282
      positionAbsolute:
        x: 1590
        y: 282
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    viewport:
      x: 436.0840605182407
      y: -34.49095663900215
      zoom: 0.812855695211663
