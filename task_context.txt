Your objective is to create a simple script that signals 1 GRT doing the same as the example curation transaction providede below.

There is a simple working example

<EXAMPLE CURATION TRANSACTION>

Transaction Details
 
Overview
Internal Txns
Logs (13)
Advanced TxInfo
State
Transaction Hash:
0x9e364481d0ce08893c3f6f52c6bcf6a095783fb36055aed36cbca328b1078b9f 
Status:
Success
Block:
279269224 1652 L1 Block Confirmations
Timestamp:
5 hrs ago (Nov-28-2024 06:03:34 PM +UTC)
Transaction Action:
Mint
1
of
Subgraph... (SG...)
From:
0xa6f8509C623e23019f52F8E5d7776Ca05641c359
Interacted With (To):
0xec9A7fb6CbC2E41926127929c2dcE6e9c5D33Bec 
ERC-20 Tokens Transferred: 4
All Transfers
Net Transfers
From
0xa6f8509C...05641c359
To
0xec9A7fb6...9c5D33Bec
For
1
($0.27)

Graph Token (GRT)
From
0xec9A7fb6...9c5D33Bec
To
0x22d78fb4...1785C8014
For
1
($0.27)

Graph Token (GRT)
From
0x22d78fb4...1785C8014
To
Null: 0x000…000
For
0.01
($0.00)

Graph Token (GRT)
From
Null: 0x000…000
To
0xec9A7fb6...9c5D33Bec
For
0.99

Graph Curati... (GCS)
ERC-721 Tokens Transferred:

ERC-721
Token ID [
22327336881714476995743838527991275714210510246126052258699153536276712602530
]
Subgraph(SG)
From
Null: 0x000…000
To
0xa6f8509C...05641c359
Value:
0 ETH
($0.00)
Transaction Fee:
0.00001970751 ETH ($0.07)
Gas Price Bid:
0.013 Gwei (0.000000000013 ETH)
Gas Price Paid:
0.01 Gwei (0.00000000001 ETH)
Gas Limit & Usage by Txn:
3,412,140 | 1,970,751 (57.76%)
Gas Fees:
Base: 0.01 Gwei
Other Attributes:
Txn Type: 0 (Legacy)
Nonce: 750
Position In Block: 1
Input Data:
Function: multicall(bytes[] data)

MethodID: 0xac9650d8
[0]:  0000000000000000000000000000000000000000000000000000000000000020
[1]:  0000000000000000000000000000000000000000000000000000000000000002
[2]:  0000000000000000000000000000000000000000000000000000000000000040
[3]:  00000000000000000000000000000000000000000000000000000000000000e0
[4]:  0000000000000000000000000000000000000000000000000000000000000064
[5]:  7ba9586240ea8eb7fcc521b9303420080e4f2a00052ea30c8f59472e7a417bf9
[6]:  29e67305f09c59bee8b8e03d671d0d6e21ab8a09ad7b4c900f3d48011bf18606
[7]:  6bf3d04f6b9e168bf0a4be905778f23a5c8bc2ca485c70f10bdaef432cfe64a7
[8]:  a0d4280700000000000000000000000000000000000000000000000000000000
[9]:  0000000000000000000000000000000000000000000000000000000000000064
[10]: d8825386315cd328e6b89d54595200a871b9a23fcfb4977cb243ff94f4ea39c6
[11]: f0e33ba20000000000000000000000000000000000000000000000000de0b6b3
[12]: a764000000000000000000000000000000000000000000000000000000000000
[13]: 0000000000000000000000000000000000000000000000000000000000000000


 The contract call From 0xa6f8509C...05641c359 To 0xec9A7fb6...9c5D33Bec produced 1 Internal Transaction

Type Trace Address	From	 	To	Value	Gas Limit
create_0_1_1_1_1_1_1	
0x22d78fb4...1785C8014
0x7b16FD05...0Fc99B570
0 ETH	1,638,938

Transaction Receipt Event Logs
0
Address
0x3fbd54f0cc17b7ae649008deea12ed7d2622b23f   
Name
Transfer (index_topic_1 address from, index_topic_2 address to, index_topic_3 uint256 tokenId)View Source

Topics
0 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
1: from
0x0000000000000000000000000000000000000000
2: to
0xa6f8509C623e23019f52F8E5d7776Ca05641c359
3: tokenId
22327336881714476995743838527991275714210510246126052258699153536276712602530
Data
0x
1
Address
0xec9a7fb6cbc2e41926127929c2dce6e9c5d33bec   
Name
SubgraphPublished (index_topic_1 uint256 subgraphID, index_topic_2 bytes32 subgraphDeploymentID, uint32 reserveRatio)View Source

Topics
0 0x42a544925af95c7d50835f669fa06cc226acbf9eea3d0cb552b1b09bc8901426
1: subgraphID
22327336881714476995743838527991275714210510246126052258699153536276712602530
2: subgraphDeploymentID
40EA8EB7FCC521B9303420080E4F2A00052EA30C8F59472E7A417BF929E67305
Data
reserveRatio :
1000000


2
Address
0x3fbd54f0cc17b7ae649008deea12ed7d2622b23f   
Name
SubgraphMetadataUpdated (index_topic_1 uint256 tokenID, bytes32 subgraphURI)View Source

Topics
0 0xd0348d353ba9da6b560ddf6465c3faf849b78869806be8900a829c064b8d4b21
1: tokenID
22327336881714476995743838527991275714210510246126052258699153536276712602530
Data
subgraphURI :
6B9E168BF0A4BE905778F23A5C8BC2CA485C70F10BDAEF432CFE64A7A0D42807


3
Address
0xec9a7fb6cbc2e41926127929c2dce6e9c5d33bec   
Name
SubgraphMetadataUpdated (index_topic_1 uint256 subgraphID, bytes32 subgraphMetadata)View Source

Topics
0 0xd0348d353ba9da6b560ddf6465c3faf849b78869806be8900a829c064b8d4b21
1: subgraphID
22327336881714476995743838527991275714210510246126052258699153536276712602530
Data
subgraphMetadata :
6B9E168BF0A4BE905778F23A5C8BC2CA485C70F10BDAEF432CFE64A7A0D42807


4
Address
0xec9a7fb6cbc2e41926127929c2dce6e9c5d33bec   
Name
SubgraphVersionUpdated (index_topic_1 uint256 subgraphID, index_topic_2 bytes32 subgraphDeploymentID, bytes32 versionMetadata)View Source

Topics
0 0x71d6df5ad69625753de8b2afc150d9b8acb2d12befb0f4709a75a18e3f7bd4bc
1: subgraphID
22327336881714476995743838527991275714210510246126052258699153536276712602530
2: subgraphDeploymentID
40EA8EB7FCC521B9303420080E4F2A00052EA30C8F59472E7A417BF929E67305
Data
versionMetadata :
F09C59BEE8B8E03D671D0D6E21AB8A09AD7B4C900F3D48011BF186066BF3D04F


5
Address
0x9623063377ad1b27544c965ccd7342f7ea7e88c7
(The Graph: GRT Token)   
Name
Transfer (index_topic_1 address from, index_topic_2 address to, uint256 value)View Source

Topics
0 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
1: from
0xa6f8509C623e23019f52F8E5d7776Ca05641c359
2: to
0xec9A7fb6CbC2E41926127929c2dcE6e9c5D33Bec
Data
value :
1000000000000000000


6
Address
0x9623063377ad1b27544c965ccd7342f7ea7e88c7
(The Graph: GRT Token)   
Name
Approval (index_topic_1 address owner, index_topic_2 address spender, uint256 value)View Source

Topics
0 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925
1: owner
0xa6f8509C623e23019f52F8E5d7776Ca05641c359
2: spender
0xec9A7fb6CbC2E41926127929c2dcE6e9c5D33Bec
Data
value :
115792089237316195423570985008687907853269984665640563882407808591820953576041


7
Address
0x9623063377ad1b27544c965ccd7342f7ea7e88c7
(The Graph: GRT Token)   
Name
Transfer (index_topic_1 address from, index_topic_2 address to, uint256 value)View Source

Topics
0 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
1: from
0xec9A7fb6CbC2E41926127929c2dcE6e9c5D33Bec
2: to
0x22d78fb4bc72e191C765807f8891B5e1785C8014
Data
value :
1000000000000000000


8
Address
0x9623063377ad1b27544c965ccd7342f7ea7e88c7
(The Graph: GRT Token)   
Name
Approval (index_topic_1 address owner, index_topic_2 address spender, uint256 value)View Source

Topics
0 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925
1: owner
0xec9A7fb6CbC2E41926127929c2dcE6e9c5D33Bec
2: spender
0x22d78fb4bc72e191C765807f8891B5e1785C8014
Data
value :
115792089237316195423570985008687907853269984665640562175098337810376130643733


9
Address
0x9623063377ad1b27544c965ccd7342f7ea7e88c7
(The Graph: GRT Token)   
Name
Transfer (index_topic_1 address from, index_topic_2 address to, uint256 value)View Source

Topics
0 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
1: from
0x22d78fb4bc72e191C765807f8891B5e1785C8014
2: to
0x0000000000000000000000000000000000000000
Data
value :
10000000000000000


10
Address
0x7b16fd05063a03f63ef564dfda7c4680fc99b570   
Name
Transfer (index_topic_1 address from, index_topic_2 address to, uint256 amount)View Source

Topics
0 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
1: from
0x0000000000000000000000000000000000000000
2: to
0xec9A7fb6CbC2E41926127929c2dcE6e9c5D33Bec
Data
amount :
990000000000000000


11
Address
0x22d78fb4bc72e191c765807f8891b5e1785c8014   
Name
Signalled (index_topic_1 address curator, index_topic_2 bytes32 subgraphDeploymentID, uint256 tokens, uint256 signal, uint256 curationTax)View Source

Topics
0 0xb7bf5f4e5b23ef992df9875ecea572620d18dab0c1a5486a9b695d20d9ec50cf
1: curator
0xec9A7fb6CbC2E41926127929c2dcE6e9c5D33Bec
2: subgraphDeploymentID
40EA8EB7FCC521B9303420080E4F2A00052EA30C8F59472E7A417BF929E67305
Data
tokens :
1000000000000000000
signal :
990000000000000000
curationTax :
10000000000000000


12
Address
0xec9a7fb6cbc2e41926127929c2dce6e9c5d33bec   
Name
SignalMinted (index_topic_1 uint256 subgraphID, index_topic_2 address curator, uint256 nSignalCreated, uint256 vSignalCreated, uint256 tokensDeposited)View Source

Topics
0 0xcd0609c8b7f9b3819c451a09420d1961056e219696df999be49338469b11b28a
1: subgraphID
22327336881714476995743838527991275714210510246126052258699153536276712602530
2: curator
0xa6f8509C623e23019f52F8E5d7776Ca05641c359
Data
nSignalCreated :
990000000000000000
vSignalCreated :
990000000000000000
tokensDeposited :
1000000000000000000

Txn Batch Index:
752614
Submission Tx Hash:
0x4bf3c03eaf25dd745f2846021be4ca81f6c117efad5ca55f56beaf8d5999f499
Poster Fee:
0.00001251636 ETH
Network Fee:
0.00000719115 ETH
L1 Gas Used:
1,251,636
L2 Gas Used:
719,115

Advanced A set of information that represents the current state is updated when a transaction takes place on the network. The below is a summary of those changes :
 	Address	 	Before	After	State Difference
0x22d78fb4...1785C8014				
0x3FbD54f0...D2622B23f	SG			
0x96230633...7EA7e88C7	

GRT
0x971B9d3d...c85e6a525				
0xa6f8509C...05641c359		
0.026341709163861502 ETH
Nonce: 750
0.026311765233861502 ETH
Nonce: 751
 0.00002994393
0xec9A7fb6...9c5D33Bec				
0x7b16FD05...0Fc99B570	GCS			




<EXAMPLE PYTHON SCRIPT>

Here is an example python script. When building the one for curation you can assume all the same .env variables are available.

import os
from web3 import Web3
from dotenv import load_dotenv
from decimal import Decimal

# Load environment variables
load_dotenv()

def deposit_eth_to_aave(w3: Web3, from_address: str, private_key: str, amount_in_eth: float) -> str:
    """Deposit ETH to Aave v3 pool on Base."""
    try:
        # Contract addresses from the example transaction
        weth_gateway = w3.to_checksum_address("0x729b3EA8C005AbC58c9150fb57Ec161296F06766")
        pool_address = w3.to_checksum_address("0xa238dd80c259a72e81d7e4664a9801593f98d1c5")
        
        # Create contract instance with minimal ABI
        contract = w3.eth.contract(
            address=weth_gateway,
            abi=[{
                "inputs": [
                    {"name": "pool", "type": "address"},
                    {"name": "onBehalfOf", "type": "address"},
                    {"name": "referralCode", "type": "uint16"}
                ],
                "name": "depositETH",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            }]
        )
        
        # Build transaction using contract function
        transaction = contract.functions.depositETH(
            pool_address,
            from_address,
            0  # referralCode
        ).build_transaction({
            'from': from_address,
            'value': w3.to_wei(amount_in_eth, 'ether'),
            'gas': 300000,
            'gasPrice': w3.eth.gas_price,
            'nonce': w3.eth.get_transaction_count(from_address),
            'chainId': w3.eth.chain_id,
        })

        # Sign and send the transaction
        signed_txn = w3.eth.account.sign_transaction(transaction, private_key)
        tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        return tx_receipt['transactionHash'].hex()
    except Exception as e:
        raise Exception(f"Transaction failed: {str(e)}")

def main():
    # Connect to Base network
    infura_project_id = os.getenv('INFURA_API_KEY')
    network = 'base-mainnet'
    w3 = Web3(Web3.HTTPProvider(f'https://{network}.infura.io/v3/{infura_project_id}'))

    if not w3.is_connected():
        print("Error: Failed to connect to Base network")
        return

    # Get wallet addresses from environment
    wallet_one = os.getenv('AGENT_ONE_ADDRESS')
    wallet_one_key = os.getenv('AGENT_ONE_PRIVATE_KEY')
    
    print("\n=== Aave ETH Deposit Tool ===\n")
    
    try:
        # Get ETH balance
        balance = w3.eth.get_balance(wallet_one)
        balance_eth = w3.from_wei(balance, 'ether')
        
        print(f"Wallet ({wallet_one})")
        print(f"Balance: {float(balance_eth):.6f} ETH\n")
        
        # Set deposit amount
        deposit_amount = 0.00001  # Fixed amount as requested
        
        if deposit_amount > float(balance_eth):
            print(f"Error: Insufficient funds. Have {float(balance_eth):.6f} ETH, trying to deposit {deposit_amount} ETH")
            return
        
        # Confirm deposit
        confirm = input(f"Confirm deposit of {deposit_amount} ETH to Aave? (yes/no): ")
        
        if confirm.lower() == 'yes':
            try:
                tx_hash = deposit_eth_to_aave(w3, wallet_one, wallet_one_key, deposit_amount)
                print("\nDeposit successful!")
                print(f"Transaction hash: {tx_hash}")
            except Exception as e:
                print(f"\nError during deposit: {str(e)}")
        else:
            print("\nDeposit cancelled")
            
    except Exception as e:
        print(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    main()


<JAVASCRIPT EXAMPLE ON OLD ETHEREUM CONTRACTS>
import React, { useEffect, useState, useMemo } from 'react'
import { useEngine, useEth } from 'hyperfy'

export default function Request() {
  const CURATION_CONTRACT = '0xadca0dd4729c8ba3acf3e99f3a9f471ef37b6825'
  
  const engine = useEngine()
  const eth = useEth()
  const contract = useMemo(() => eth.contract(CURATION_CONTRACT, [
  'function mintSignal(uint256 _subgraphID, uint256 _tokensIn, uint256 _nSignalOutMin) external override notPartialPaused',
]))
  const [status_mint, setMintStatus] = useState(null)
  const [status, setStatus] = useState('Who are you?')
  const [response, setResponse] = useState("")
  // subgraph ids setup
  const [subgraph_id1, setSubgraphID1] = useState(null)
  const [subgraph_id2, setSubgraphID2] = useState(null)
  const [subgraph_id3, setSubgraphID3] = useState(null)
  const [subgraph_id4, setSubgraphID4] = useState(null)
  const [subgraph_id5, setSubgraphID5] = useState(null)
  const [subgraph_id6, setSubgraphID6] = useState(null)
  const [subgraph_id7, setSubgraphID7] = useState(null)
  const [subgraph_id8, setSubgraphID8] = useState(null)
  const [subgraph_id9, setSubgraphID9] = useState(null)
  const [subgraph_id10, setSubgraphID10] = useState(null)
  const [subgraph_id11, setSubgraphID11] = useState(null)
  const [subgraph_id12, setSubgraphID12] = useState(null)
  // urls setup
  const [url1, setUrl1] = useState("https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Very_Black_screen.jpg/1600px-Very_Black_screen.jpg?20200816082819")
  const [url2, setUrl2] = useState("https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Very_Black_screen.jpg/1600px-Very_Black_screen.jpg?20200816082819")
  const [url3, setUrl3] = useState("https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Very_Black_screen.jpg/1600px-Very_Black_screen.jpg?20200816082819")
  const [url4, setUrl4] = useState("https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Very_Black_screen.jpg/1600px-Very_Black_screen.jpg?20200816082819")
  const [url5, setUrl5] = useState("https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Very_Black_screen.jpg/1600px-Very_Black_screen.jpg?20200816082819")
  const [url6, setUrl6] = useState("https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Very_Black_screen.jpg/1600px-Very_Black_screen.jpg?20200816082819")
  const [url7, setUrl7] = useState("https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Very_Black_screen.jpg/1600px-Very_Black_screen.jpg?20200816082819")
  const [url8, setUrl8] = useState("https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Very_Black_screen.jpg/1600px-Very_Black_screen.jpg?20200816082819")
  const [url9, setUrl9] = useState("https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Very_Black_screen.jpg/1600px-Very_Black_screen.jpg?20200816082819")
  const [url10, setUrl10] = useState("https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Very_Black_screen.jpg/1600px-Very_Black_screen.jpg?20200816082819")
  const [url11, setUrl11] = useState("https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Very_Black_screen.jpg/1600px-Very_Black_screen.jpg?20200816082819")
  const [url12, setUrl12] = useState("https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Very_Black_screen.jpg/1600px-Very_Black_screen.jpg?20200816082819")
  // subgraph names setup
  const [text1, setText1] = useState("")
  const [text2, setText2] = useState("")
  const [text3, setText3] = useState("")
  const [text4, setText4] = useState("")
  const [text5, setText5] = useState("")
  const [text6, setText6] = useState("")
  const [text7, setText7] = useState("")
  const [text8, setText8] = useState("")
  const [text9, setText9] = useState("")
  const [text10, setText10] = useState("")
  const [text11, setText11] = useState("")
  const [text12, setText12] = useState("")
  // subgraph signal setup
  const [signal1, setSignal1] = useState("")
  const [signal2, setSignal2] = useState("")
  const [signal3, setSignal3] = useState("")
  const [signal4, setSignal4] = useState("")
  const [signal5, setSignal5] = useState("")
  const [signal6, setSignal6] = useState("")
  const [signal7, setSignal7] = useState("")
  const [signal8, setSignal8] = useState("")
  const [signal9, setSignal9] = useState("")
  const [signal10, setSignal10] = useState("")
  const [signal11, setSignal11] = useState("")
  const [signal12, setSignal12] = useState("")
  
  //NOTE: need to take user inputs to update the curation amount!
  
    async function curate1(e) {
      //const { address } = e.avatar
      //if (!address) return setMintStatus('Not connected!')
      //setMintStatus('Please confirm transaction')
      const tx = await contract.write('mintSignal', subgraph_id1, "1000000000000000000", 0)
      //setMintStatus('Verifying...')
      await tx.wait()
      //setMintStatus('Minted!')
  }
  
    async function curate2(e) {
      const tx = await contract.write('mintSignal', subgraph_id2, "1000000000000000000", 0)
      await tx.wait()
  }
  async function curate3(e) {
      const tx = await contract.write('mintSignal', subgraph_id3, "1000000000000000000", 0)
      await tx.wait()
  }
  async function curate4(e) {
      const tx = await contract.write('mintSignal', subgraph_id4, "1000000000000000000", 0)
      await tx.wait()
  }
  async function curate5(e) {
      const tx = await contract.write('mintSignal', subgraph_id5, "1000000000000000000", 0)
      await tx.wait()
  }
  async function curate6(e) {
      const tx = await contract.write('mintSignal', subgraph_id6, "1000000000000000000", 0)
      await tx.wait()
  }
  async function curate7(e) {
      const tx = await contract.write('mintSignal', subgraph_id7, "1000000000000000000", 0)
      await tx.wait()
  }
  async function curate8(e) {
      const tx = await contract.write('mintSignal', subgraph_id8, "1000000000000000000", 0)
      await tx.wait()
  }
  async function curate9(e) {
      const tx = await contract.write('mintSignal', subgraph_id9, "1000000000000000000", 0)
      await tx.wait()
  }
  async function curate10(e) {
      const tx = await contract.write('mintSignal', subgraph_id10, "1000000000000000000", 0)
      await tx.wait()
  }
  async function curate11(e) {
      const tx = await contract.write('mintSignal', subgraph_id11, "1000000000000000000", 0)
      await tx.wait()
  }
  async function curate12(e) {
      const tx = await contract.write('mintSignal', subgraph_id12, "1000000000000000000", 0)
      await tx.wait()
  }
  

  useEffect(() => {
    return engine.onAction(async (action, ...args) => {
      if (action === 'request') {
        const address = args[0]
        if (address != null) {
          setStatus(`Welcome ${address.slice(0, 5)}...`)
        } else{
          setStatus(`I asked who you are, identify yourself!`)
        }
        try {
          await engine
            .http({
              url: 'https://api.thegraph.com/subgraphs/name/graphprotocol/graph-network-mainnet',
              method: 'POST',
              data: {
                query: `
              query MyQuery {
                  subgraphs(first:30, orderBy: createdAt, orderDirection: desc, where:{signalledTokens_gt: 0, currentVersion_not: null}) {
                    id
                    nftID
                    displayName
                    image
                    currentSignalledTokens     
                    currentVersion {
                      id
                      subgraphDeployment {
                        id
                      }
                    }
                  }
                }`,
              },
            })
            .then(res => {
              console.log(res)
              setResponse(JSON.stringify(res.data, null, 2))
              //console.log(res.data.subgraphs[0].image)
              // update images
              setUrl1(res.data.subgraphs[0].image)
              setUrl2(res.data.subgraphs[1].image)
              setUrl3(res.data.subgraphs[2].image)
              setUrl4(res.data.subgraphs[3].image)
              setUrl5(res.data.subgraphs[4].image)
              setUrl6(res.data.subgraphs[5].image)
              setUrl7(res.data.subgraphs[6].image)
              setUrl8(res.data.subgraphs[7].image)
              setUrl9(res.data.subgraphs[8].image)
              setUrl10(res.data.subgraphs[9].image)
              setUrl11(res.data.subgraphs[10].image)
              setUrl12(res.data.subgraphs[11].image)
              // update display names
              setText1(res.data.subgraphs[0].displayName)
              setText2(res.data.subgraphs[1].displayName)
              setText3(res.data.subgraphs[2].displayName)
              setText4(res.data.subgraphs[3].displayName)
              setText5(res.data.subgraphs[4].displayName)
              setText6(res.data.subgraphs[5].displayName)
              setText7(res.data.subgraphs[6].displayName)
              setText8(res.data.subgraphs[7].displayName)
              setText9(res.data.subgraphs[8].displayName)
              setText10(res.data.subgraphs[9].displayName)
              setText11(res.data.subgraphs[10].displayName)
              setText12(res.data.subgraphs[11].displayName)
              // update signal amounts
              setSignal1("Current GRT Signal: " + Math.round(parseInt(res.data.subgraphs[0].currentSignalledTokens)/1000000000000000000))
              setSignal2("Current GRT Signal: " + Math.round(parseInt(res.data.subgraphs[1].currentSignalledTokens)/1000000000000000000))
              setSignal3("Current GRT Signal: " + Math.round(parseInt(res.data.subgraphs[2].currentSignalledTokens)/1000000000000000000))
              setSignal4("Current GRT Signal: " + Math.round(parseInt(res.data.subgraphs[3].currentSignalledTokens)/1000000000000000000))
              setSignal5("Current GRT Signal: " + Math.round(parseInt(res.data.subgraphs[4].currentSignalledTokens)/1000000000000000000))
              setSignal6("Current GRT Signal: " + Math.round(parseInt(res.data.subgraphs[5].currentSignalledTokens)/1000000000000000000))
              setSignal7("Current GRT Signal: " + Math.round(parseInt(res.data.subgraphs[6].currentSignalledTokens)/1000000000000000000))
              setSignal8("Current GRT Signal: " + Math.round(parseInt(res.data.subgraphs[7].currentSignalledTokens)/1000000000000000000))
              setSignal9("Current GRT Signal: " + Math.round(parseInt(res.data.subgraphs[8].currentSignalledTokens)/1000000000000000000))
              setSignal10("Current GRT Signal: " + Math.round(parseInt(res.data.subgraphs[9].currentSignalledTokens)/1000000000000000000))
              setSignal11("Current GRT Signal: " + Math.round(parseInt(res.data.subgraphs[10].currentSignalledTokens)/1000000000000000000))
              setSignal12("Current GRT Signal: " + Math.round(parseInt(res.data.subgraphs[11].currentSignalledTokens)/1000000000000000000))
              // set subgraphID to mint signal on
              setSubgraphID1(res.data.subgraphs[0].nftID)
              setSubgraphID2(res.data.subgraphs[1].nftID)
              setSubgraphID3(res.data.subgraphs[2].nftID)
              setSubgraphID4(res.data.subgraphs[3].nftID)
              setSubgraphID5(res.data.subgraphs[4].nftID)
              setSubgraphID6(res.data.subgraphs[5].nftID)
              setSubgraphID7(res.data.subgraphs[6].nftID)
              setSubgraphID8(res.data.subgraphs[7].nftID)
              setSubgraphID9(res.data.subgraphs[8].nftID)
              setSubgraphID10(res.data.subgraphs[9].nftID)
              setSubgraphID11(res.data.subgraphs[10].nftID)
              setSubgraphID12(res.data.subgraphs[11].nftID)
            })
        } catch (e) {
          console.log(e)
          console.log('request failed')
        }
      }
    })
  }, [])

  async function call(e) {
    const { address } = e.avatar
    //if (!address) return setStatus('Please connect your wallet')
    engine.dispatch('request', address)
    console.log('dispatched request')
  }

  return (
    <>
      <image
        src={url1}        
        //src=data.subgraphs[0].image
        position={[-4.4, 2, 5]}
        rotation={[0,1.6,0]}
        height={1.5}
        //onClick={() => console.log(color)}
        onClick={curate1}
      />
      <text
        value={text1}
        position={[-4.4, 3, 5]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <text
        value={signal1}
        position={[-4.4, 1.2, 5]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <image
        src={url2}
        position={[-4.4, 2, 2]}
        rotation={[0,1.6,0]}
        height={1.5}
        onClick={curate2}
      />
      <text
        value={text2}
        position={[-4.4, 3, 2]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <text
        value={signal2}
        position={[-4.4, 1.2, 2]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <image
        src={url3}
        position={[-4.4, 2, -1]}
        rotation={[0,1.6,0]}
        height={1.5}
        onClick={curate3}
      />
      <text
        value={text3}
        position={[-4.4, 3, -1]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <text
        value={signal3}
        position={[-4.4, 1.2, -1]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <image
        src={url4}
        position={[-4.4, 2, -4]}
        rotation={[0,1.6,0]}
        height={1.5}
        onClick={curate4}
      />
      <text
        value={text4}
        position={[-4.4, 3, -4]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <text
        value={signal4}
        position={[-4.4, 1.2, -4]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <image
        src={url5}
        position={[-4.4, 2, -7]}
        rotation={[0,1.6,0]}
        height={1.5}
        onClick={curate4}
      />
      <text
        value={text5}
        position={[-4.4, 3, -7]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <text
        value={signal5}
        position={[-4.4, 1.2, -7]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <image
        src={url6}        
        //src=data.subgraphs[0].image
        position={[-4.4, 2, -10]}
        rotation={[0,1.6,0]}
        height={1.5}
        //onClick={() => console.log(color)}
        onClick={curate1}
      />
      <text
        value={text6}
        position={[-4.4, 3, -10]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <text
        value={signal6}
        position={[-4.4, 1.2, -10]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <image
        src={url7}        
        //src=data.subgraphs[0].image
        position={[-4.4, 2, -13]}
        rotation={[0,1.6,0]}
        height={1.5}
        //onClick={() => console.log(color)}
        onClick={curate1}
      />
      <text
        value={text7}
        position={[-4.4, 3, -13]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <text
        value={signal7}
        position={[-4.4, 1.2, -13]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <image
        src={url8}        
        //src=data.subgraphs[0].image
        position={[-4.4, 2, -16]}
        rotation={[0,1.6,0]}
        height={1.5}
        //onClick={() => console.log(color)}
        onClick={curate1}
      />
      <text
        value={text8}
        position={[-4.4, 3, -16]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <text
        value={signal8}
        position={[-4.4, 1.2, -16]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <image
        src={url9}        
        //src=data.subgraphs[0].image
        position={[-4.4, 2, -19]}
        rotation={[0,1.6,0]}
        height={1.5}
        //onClick={() => console.log(color)}
        onClick={curate1}
      />
      <text
        value={text9}
        position={[-4.4, 3, -19]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <text
        value={signal9}
        position={[-4.4, 1.2, -19]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <image
        src={url10}        
        //src=data.subgraphs[0].image
        position={[-4.4, 2, -22]}
        rotation={[0,1.6,0]}
        height={1.5}
        //onClick={() => console.log(color)}
        onClick={curate1}
      />
      <text
        value={text10}
        position={[-4.4, 3, -22]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <text
        value={signal10}
        position={[-4.4, 1.2, -22]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <image
        src={url11}        
        //src=data.subgraphs[0].image
        position={[-4.4, 2, -25]}
        rotation={[0,1.6,0]}
        height={1.5}
        //onClick={() => console.log(color)}
        onClick={curate1}
      />
      <text
        value={text11}
        position={[-4.4, 3, -25]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <text
        value={signal11}
        position={[-4.4, 1.2, -25]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <image
        src={url12}        
        //src=data.subgraphs[0].image
        position={[-4.4, 2, -28]}
        rotation={[0,1.6,0]}
        height={1.5}
        //onClick={() => console.log(color)}
        onClick={curate1}
      />
      <text
        value={text12}
        position={[-4.4, 3, -28]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <text
        value={signal12}
        position={[-4.4, 1.2, -28]}
        rotation={[0,1.6,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <model 
          src="Astronaut.glb" 
          position={[0,0.1,5]}
          allColliders='trimesh'
          onClick={call}
        />
      <text
        value="Click the astronaut to request data from The Graph"
        position={[0, 2.3, 5]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
        />
      <model 
          src="detective_purchased.glb" //https://www.cgtrader.com/3d-models/character/man/realistic-detective-officer-character-rigged-3d-model-low-poly
          //animate={animation} //not currently working - idea is to go from Shoot to idle once user is logged in
          position={[2.5,0.1,6]}
          rotation={[0,-0.7,0]}
          allColliders='trimesh'
          scale={1.15}
          onClick={call}
        />
      <text
        value={status}
        position={[2.5,2.5,6]}
        rotation={[0,-0.7,0]}
        color="white"
        bgColor="black"
        padding={0.1}
        bgRadius={0.1}
      />
      <text
        //value={response} //remove comment if want to show the raw response
        position={[0, 3, 3]}
        color="white"
        bgColor="black"
        padding={0.01}
        bgRadius={0.01}
        fontSize={0.05}
      />
    </>
  )
}


<ARBITRUM CONTRACTS FOR THE GRAPH>
Arbitrum⁠#Link to this section
This is the principal deployment of The Graph Network.

Contract	Address
GraphProxyAdmin	
0x2983936aC20202a6555993448E0d5654AC8Ca5fd⁠
BancorFormula	
0xA489FDc65229D6225014C0b357BCD19af6f00eE9⁠
Controller	
0x0a8491544221dd212964fbb96487467291b2C97e⁠
EpochManager	
0x5A843145c43d328B9bB7a4401d94918f131bB281⁠
L2GraphToken	
0x9623063377AD1B27544C965cCd7342f7EA7e88C7⁠
GraphCurationToken	
0x47a0d56ea574419B524285d52fFe7198297D209c⁠
ServiceRegistry	
0x072884c745c0A23144753335776c99BE22588f8A⁠
L2Curation	
0x22d78fb4bc72e191C765807f8891B5e1785C8014⁠
SubgraphNFTDescriptor	
0x96cce9b6489744630A058324FB22e7CD02815ebe⁠
SubgraphNFT	
0x3FbD54f0cc17b7aE649008dEEA12ed7D2622B23f⁠
L2GNS	
0xec9A7fb6CbC2E41926127929c2dcE6e9c5D33Bec⁠
L2Staking	
0x00669A4CF01450B64E8A2A20E9b1FCB71E61eF03⁠
RewardsManager	
0x971B9d3d0Ae3ECa029CAB5eA1fB0F72c85e6a525⁠
DisputeManager	
0x0Ab2B043138352413Bb02e67E626a70320E3BD46⁠
AllocationExchange	
0x993F00C98D1678371a7b261Ed0E0D4b6F42d9aEE⁠
L2GraphTokenGateway	
0x65E1a5e8946e7E87d9774f5288f41c30a99fD302⁠
EthereumDIDRegistry	
0xa9AEb1c6f14f4244547B9a0946C485DA99047638⁠
IEthereumDIDRegistry	
0xa9AEb1c6f14f4244547B9a0946C485DA99047638⁠
StakingExtension	
0x3bE385576d7C282070Ad91BF94366de9f9ba3571⁠